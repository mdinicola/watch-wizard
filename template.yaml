AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template for WatchWizard Application
Globals:
  Function:
    Runtime: python3.9
    Timeout: 30
Parameters:
  ServiceName:
    Type: String
    Default: WatchWizard
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${ServiceName}-Lambda-Policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:PutSecretValue"
                Resource:
                  - !Ref SecretsManagerSecret
            
  SecretsManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "apps/${ServiceName}"
      Description: !Sub "Secret values for the ${ServiceName} application"
      SecretString: '{"TraktClientId": "", "TraktClientSecret": ""}'

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: "Prod"
      Name: !Sub "${ServiceName}-ApiGateway"
      Auth:
        ApiKeyRequired: true
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: "./api.json"
      MethodSettings:
      - LoggingLevel: ERROR
        ResourcePath: "/*"
        HttpMethod: "*"

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub "${ServiceName}-Default-Usage-Plan"
      ApiStages:
        - ApiId: !Ref ApiGatewayApi
          Stage: Prod
      Description: !Sub "Default usage plan for the ${ServiceName} service"
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub "${ServiceName}-Default-API-Key"
      Description: !Sub "Default API key for the ${ServiceName} service"
      Enabled: True
      StageKeys:
        - RestApiId: !Ref ApiGatewayApi
          StageName: Prod

  UsagePlanApiKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties: 
      KeyId: !Ref ApiKey
      KeyType: 'API_KEY'
      UsagePlanId: !Ref UsagePlan

  TraktGetAuthCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-Trakt-GetAuthCode"
      Role: !GetAtt LambdaRole.Arn
      CodeUri: watch-wizard/
      Handler: trakt_handler.get_auth_code
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: "/trakt/auth-code"
            Method: get

  TraktAuthenticateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ServiceName}-Trakt-Authenticate"
      Role: !GetAtt LambdaRole.Arn
      CodeUri: watch-wizard/
      Handler: trakt_handler.authenticate
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGatewayApi
            Path: "/trakt/authenticate"
            Method: post
